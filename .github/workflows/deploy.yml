name: Client Deploy
# 타겟 브랜치를 설정한다.
on:
  push:
    branches:
      - client

jobs:
  build:
    runs-on: ubuntu-18.04
    steps:
      # 브랜치에 checkout해 코드를 가져온다
      - name: Checkout source code.
        uses: actions/checkout@master

      # node 버전을 확인한다.
      - name: Check Node v
        run: node -v

      # 직업폴더를 설정 한 수 의존 파일을 설치한다.
      - name: Install Dependencies
        working-directory: ./client
        run: npm install

      # Github Repository Secrets를 통해 환경 변수 파일을 생성한다.
      - name: Generate Environment Variables File for Production
        run: |
          echo "REACT_APP_PROD_SERVER_BASE_URL=$REACT_APP_PROD_SERVER_BASE_URL" >> .env.production
          echo "REACT_APP_PROD_GOOGLE_CLIENT_ID=$REACT_APP_PROD_GOOGLE_CLIENT_ID" >> .env.production
          echo "REACT_APP_PROD_KAKAO_API_KEY=$REACT_APP_PROD_KAKAO_API_KEY" >> .env.production
          echo "REACT_APP_PROD_KAKAO_REDIRECT_URI=$REACT_APP_PROD_KAKAO_REDIRECT_URI" >> .env.production
          echo "REACT_APP_PROD_GITHUB_CLIENT_ID=$REACT_APP_PROD_GITHUB_CLIENT_ID" >> .env.production
          echo "REACT_APP_PROD_GITHUB_CLIENT_SECRET=$REACT_APP_PROD_GITHUB_CLIENT_SECRET" >> .env.production
          echo "REACT_APP_PROD_GITHUB_AUTHORIZATION_CALLBACK_URL=$REACT_APP_PROD_GITHUB_AUTHORIZATION_CALLBACK_URL" >> .env.production
        env:
          REACT_APP_PROD_SERVER_BASE_URL: ${{ secrets.REACT_APP_PROD_SERVER_BASE_URL }}
          REACT_APP_PROD_GOOGLE_CLIENT_ID: ${{ secrets.REACT_APP_PROD_GOOGLE_CLIENT_ID }}
          REACT_APP_PROD_KAKAO_API_KEY: ${{ secrets.REACT_APP_PROD_KAKAO_API_KEY }}
          REACT_APP_PROD_KAKAO_REDIRECT_URI: ${{ secrets.REACT_APP_PROD_KAKAO_REDIRECT_URI }}
          REACT_APP_PROD_GITHUB_CLIENT_ID: ${{ secrets.REACT_APP_PROD_GITHUB_CLIENT_ID }}
          REACT_APP_PROD_GITHUB_CLIENT_SECRET: ${{ secrets.REACT_APP_PROD_GITHUB_CLIENT_SECRET }}
          REACT_APP_PROD_GITHUB_AUTHORIZATION_CALLBACK_URL: ${{ secrets.REACT_APP_PROD_GITHUB_AUTHORIZATION_CALLBACK_URL }}

      # 프로젝트를 Build 한다.
      - name: Build
        working-directory: ./client
        run: npm run build
        env:
          CI: false

      # S3에 올리기 전에 zip으로 압축한다.
      - name: Install zip
        uses: montudor/action-zip@v1

      - name: zip create
        working-directory: ./client
        run: zip -qq -r build.zip build appspec.yml
        shell: bash

      # build 파일 생성여부를 확인한다.
      - name: Build folder find
        working-directory: ./client
        run: |
          ls

      # AWS 사용자 정보를 입력한다.
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Upload build file to S3
      - name: Upload to S3
        working-directory: ./client
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        # aws s3 cp --region ap-northeast-2 **./server.zip** s3://**S3버킷이름/S3에서-업로드하고자-하는-폴더**/**server.zip** 원하는 이름대로 수정한다.
        run: |
          aws s3 cp --region ${{ secrets.AWS_REGION }} ./build.zip s3://${{ secrets.S3_BUCKET }}/build.zip
      - name: Deploy # Deploy to EC2
        working-directory: ./client
        run: aws deploy create-deployment
          --application-name ${{ secrets.APPLICATION_NAME }}
          --deployment-config-name CodeDeployDefault.AllAtOnce
          --deployment-group-name ${{ secrets.DEPLOYMENT_GROUP_NAME }}
          --s3-location bucket=${{ secrets.S3_BUCKET }},key=build.zip,bundleType=zip
