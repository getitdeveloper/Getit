name: ServerDeploy
on:
  push:
    branches:
      - master  # 타겟 브랜치를 설정한다.
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # 브랜치에 checkout해 코드를 가져온다
      - name: Checkout source code.
        uses: actions/checkout@v2
      # node 버전을 확인한다.
      - name: Check Node v
        run: node -v
      # 직업폴더를 설정 한 수 의존 파일을 설치한다.
      - name: Install Dependencies
        working-directory: ./client
        run: npm install
      # Build한다
      - name: Build # Fastify Build and Start
        working-directory: ./client
        run: npm build
      # S3에 올리기 전에 zip으로 압축한다.
      - name: zip create
        working-directory: ./client/build
        run: zip -qq -r ./build.zip .
        shell: bash
     # AWS 사용자 정보를 입력한다.
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      # S3에 올린다.
      - name: Upload to S3 # Upload build file to S3
        working-directory: ./client
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      # aws s3 cp --region ap-northeast-2 **./server.zip** s3://**S3버킷이름/S3에서-업로드하고자-하는-폴더**/**server.zip** 원하는 이름대로 수정한다.
        run: |
          aws s3 cp --region ap-northeast-2 ./build.zip s3://getit-github-action/client/build.zip
      - name: Deploy # Deploy to EC2
        working-directory: ./client
        run: aws deploy create-deployment
          --application-name getit
          --deployment-config-name CodeDeployDefault.AllAtOnce
          --deployment-group-name getit
          --s3-location bucket=getit-github-action,key=client/build.zip**,bundleType=zip
